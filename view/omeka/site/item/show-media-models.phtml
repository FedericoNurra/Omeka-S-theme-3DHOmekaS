<?php

$mediaExtent = [];
$lightMedia = [];
$otherMedia = [];
foreach ($item->media() as $media) {
	array_push($mediaExtent, $media->mediaType());
	array_push($mediaExtent, $media->renderer());
	array_push($mediaExtent, $media->extension());
    $mediaType = $media->mediaType();
    $mediaRenderer = $media->renderer();
	$mediaRenderer = $media->renderer();
	if ($mediaType !== null && strpos($mediaType, 'image/') !== false) {
		$lightMedia[] = $media;
	} else {
		$otherMedia[] = $media;
	}
}
$tdExt = array('ply', 'nxs', 'nxz');
$imgExt = array('image/jpeg', 'image/png');
$gisExt = array("geojson", "kml");
$ytExt = array("youtube");
$videoExt = array("mp4", "ogv", "webm");
$audioExt = array("mp3");
$pdfExt = array("pdf");

if ($linkedModels = $item->value('cidoc-crm:P138i_has_representation', ['all' => true])):
	foreach ($linkedModels as $linkedModel):
		if ($linkedModelsModels = $linkedModel->valueResource()->media()):
			foreach ($linkedModelsModels as $linkedModelsModel):
				array_push($mediaExtent, $linkedModelsModel->extension());
			endforeach;				
		endif;
	endforeach;
endif;
?>

<div class="testHalfImg">
	<div class="w3-bar w3-black">
		<?php
		$tabButtons = [
			'tdExt' => ['label' => '3D Models', 'tab' => '3dhop'],
			'gisExt' => ['label' => 'GIS Data', 'tab' => 'gisData'],
			'imgExt' => ['label' => 'Images', 'tab' => 'mediaTab'],
			'ytExt' => ['label' => 'YouTube', 'tab' => 'youtubeTab'],
			'videoExt' => ['label' => 'Videos', 'tab' => 'videoTab'],
			'audioExt' => ['label' => 'Audios', 'tab' => 'audioTab'],
			'pdfExt' => ['label' => 'PDF', 'tab' => 'pdfTab']
		];
		foreach ($tabButtons as $extType => $button) {
			if (array_intersect($mediaExtent, $$extType)) {
				echo '<button class="w3-bar-item w3-button tablink" onclick="openTabs(event, \'' . $button['tab'] . '\')">' . $button['label'] . '</button>';
			}
		}
		?>
	</div>
	<div id=3dhopParent>
	<?php if (array_intersect($mediaExtent, $tdExt)): ?> 
		<div id="3dhop" class="tdhop tab" onmousedown="if (event.preventDefault) event.preventDefault()">
			<!-- Toolbar personnalisée -->
			<div id="custom-toolbar">
				<button class="tool-btn" id="toggleToolbar" onclick="toggleToolbar()"><i class="fa-solid fa-toolbox"></i></button>
				<div id="toggled-toolbar" class="hidden">
					<!-- Vue initiale -->
					<button class="tool-btn" data-action="home" onclick="actionsToolbar('home')" title="Vue initiale">
						<i class="fas fa-home"></i>
					</button>
					<!-- Zoom -->
					<button class="tool-btn" data-action="zoomin" onclick="actionsToolbar('zoomin')" title="Zoom avant">
						<i class="fas fa-search-plus"></i>
					</button>
					<button class="tool-btn" data-action="zoomout" onclick="actionsToolbar('zoomout')" title="Zoom arrière">
						<i class="fas fa-search-minus"></i>
					</button>
					<!-- Contrôle de lumière -->
					<button class="tool-btn" data-action="light" onclick="actionsToolbar('light')" title="Contrôle de la lumière">
						<i class="fa-regular fa-lightbulb"></i> <!-- état initial = désactivé -->
					</button>
					<!-- Éclairage -->
					<button class="tool-btn" data-action="lighting" onclick="actionsToolbar('lighting')" title="Activer/Désactiver l’éclairage">
						<i class="fa-solid fa-sun"></i>
					</button>
					<!-- Modes couleur -->
					<button id="color_on" style="display:none;" class="tool-btn color-btn" data-color="1" onclick="actionsToolbar('color1')" title="Mode couleur plein">
						<i class="fas fa-brush"></i>					
					</button>
					<button id="color_off" class="tool-btn color-btn" data-color="2" onclick="actionsToolbar('color2')" title="Mode transparent">
						<i class="fa-solid fa-palette"></i>
					</button>
					<button id="color_tr" style="display:none;" class="tool-btn color-btn" data-color="3" onclick="actionsToolbar('color3')" title="Couleur unie">
						<i class="fa-solid fa-droplet-slash"></i>
					</button>
					<!-- Caméra -->
					<button id="perspective-btn" class="tool-btn" data-action="perspective" onclick="actionsToolbar('perspective')" title="Changer le type de caméra">
						<i id="camera-icon-persp" class="fas fa-cube"></i>
						<i id="camera-icon-ortho" class="fa-regular fa-square" style="display:none;"></i>
					</button>
					<!-- Outils -->
					<button class="tool-btn" data-action="measure" onclick="actionsToolbar('measure')" title="Outil de mesure">
						<i class="fas fa-ruler"></i>
					</button>
					<button class="tool-btn" data-action="pick" onclick="actionsToolbar('pick')" title="Coordonnées (PickPoint)">
						<i class="fas fa-crosshairs"></i>
					</button>
					<button class="tool-btn" data-action="sections" onclick="toggleSections()" title="Sections planes">
						<i class="fas fa-layer-group"></i>
					</button>
					<!-- Capture & plein écran -->
					<button class="tool-btn" data-action="screenshot" onclick="actionsToolbar('screenshot')" title="Capture d’écran">
						<i class="fas fa-camera"></i>
					</button>
					<button class="tool-btn" data-action="full" onclick="actionsToolbar('full')" title="Plein écran">
						<i class="fa-solid fa-expand"></i>
					</button>
				</div>
			</div>
			<div id="output-boxes-container">
				<!-- Fenêtre : Sections -->
				<div id="sections-box" class="output-box">
					<table class="output-table" onmousedown="event.stopPropagation()">
						<tr><td>Plane</td><td>Position</td><td>Flip</td></tr>
						<tr>
							<td>
								<img id="xplane_on" src="<?= $this->assetUrl('skins/icons/sectionX_on.png'); ?>" title="Disable X Section" onclick="sectionxSwitch()" style="position:absolute; visibility:hidden;" />
								<img id="xplane" src="<?= $this->assetUrl('skins/icons/sectionX.png'); ?>" title="Enable X Section" onclick="sectionxSwitch()" />
							</td>
							<td>
								<input id="xplaneSlider" class="output-input" type="range" min="-1" max="1" step="0.01" title="Move X Position" />
							</td>
							<td>
								<input id="xplaneFlip" class="output-input" type="checkbox" title="Flip X Direction" />
							</td>
						</tr>
						<tr>
							<td>
								<img id="yplane_on" src="<?= $this->assetUrl('skins/icons/sectionY_on.png'); ?>" title="Disable Y Section" onclick="sectionySwitch()" style="position:absolute; visibility:hidden;" />
								<img id="yplane" src="<?= $this->assetUrl('skins/icons/sectionY.png'); ?>" title="Enable Y Section" onclick="sectionySwitch()" />
							</td>
							<td>
								<input id="yplaneSlider" class="output-input" type="range" min="-1" max="1" step="0.01" title="Move Y Position" />
							</td>
							<td>
								<input id="yplaneFlip" class="output-input" type="checkbox" title="Flip Y Direction" />
							</td>
						</tr>
						<tr>
							<td>
								<img id="zplane_on" src="<?= $this->assetUrl('skins/icons/sectionZ_on.png'); ?>" title="Disable Z Section" onclick="sectionzSwitch()" style="position:absolute; visibility:hidden;" />
								<img id="zplane" src="<?= $this->assetUrl('skins/icons/sectionZ.png'); ?>" title="Enable Z Section" onclick="sectionzSwitch()" />
							</td>
							<td>
								<input id="zplaneSlider" class="output-input" type="range" min="-1" max="1" step="0.01" title="Move Z Position" />
							</td>
							<td>
								<input id="zplaneFlip" class="output-input" type="checkbox" title="Flip Z Direction" />
							</td>
						</tr>
					</table>
					<table class="output-table" onmousedown="event.stopPropagation()" style="text-align:right;">
						<tr>
							<td>
								Show planes <input id="showPlane" class="output-input" type="checkbox" onchange="presenter.showSectionPlanes(this.checked)" />
							</td>
							<td>
								Show edges <input id="showBorder" class="output-input" type="checkbox" onchange="presenter.showSectionBorders(this.checked)" />
							</td>
						</tr>
					</table>
				</div>

				<!-- Fenêtre : Mesure -->
				<div id="measure-box" class="output-box">
				<div class="output-header">Measured length</div>
				<hr />
				<div id="measure-output" class="output-text">0.0</div>
				</div>

				<!-- Fenêtre : Pickpoint -->
				<div id="pickpoint-box" class="output-box">
				<div class="output-header">
					Coordinates <?= $srs = $item->value('air:spatial_reference_system') ? "({$srs})" : '' ?>
				</div>
				<hr />
				<div id="pickpoint-output" class="output-text">[ 0 , 0 , 0 ]</div>
				</div>

				<!-- Fenêtre : Position de la caméra -->
				<div id="infoPositionContainer" class="output-box">
				<div class="output-header">Trackball position</div>
				<hr />
				<div id="hiddenPosition" style="display:none"></div>
				<div class="output-actions">
					<button id="copyPosition" onclick="copyToClipboard('#hiddenPosition')" title="Copy">
					<i class="far fa-clipboard"></i>
					</button>
					<button id="closePosition" onclick="$('#infoPositionContainer').hide()" title="Close">
					<i class="fas fa-times"></i>
					</button>
				</div>
				</div>

			</div>
			

			<div class="toggleLegend tool-btn" id="toggleLegend" title="Show the layers" onclick="toggleLegend()"><i class="fas fa-bars"></i></div>
			<div class="layerHopList">
				<div class="legend">Layers:</div>
					<div class="bubble checkAll">
						<input id="checkAll" class="layerCB" type="checkbox" style="cursor:hand;" onclick="checkAllModels();">Check All</input>
					</div>
					<fieldset>
					<?php foreach($otherMedia as $media): ?>
						<?php if (in_array($media->extension(), ["nxz", "ply", "nxs"])): ?>
							<div class="<?php echo "layer" . $media->id() . ""; ?>">
								<div class="<?php echo $media->value('dcterms:type'); ?>">
									<div class="bubble original">
										<input class="layerOK" type="checkbox" checked="checked" style="cursor:hand;" onclick="presenter.toggleInstanceVisibilityByName('<?php $modelName = "Model" . $media->id() . ""; echo $modelName ?>', true);">
										<?php echo $media->displayTitle(); ?> </input>
									</div>
								</div>
							</div>
						<?php endif; ?>
					<?php endforeach; ?>
					<?php if ($linkedModels = $item->value('dcterms:hasPart', ['all' => true])): ?>
						<?php foreach($linkedModels as $linkedModel): ?>
							<?php if ($linkedModelsMedias = $linkedModel->valueResource()->media()): ?>
								<?php foreach($linkedModelsMedias as $linkedModelsMedia): ?>
									<?php if (in_array($linkedModelsMedia->extension(), ["nxz", "ply", "nxs"])): ?>
										<div class="<?php echo "layer" . $linkedModelsMedia->id() . ""; ?>">
											<div class="context">
												<div class="bubble model">
													<input class="layerOK" type="checkbox" checked="checked" style="cursor:hand;" onclick="presenter.toggleInstanceVisibilityByName('<?php $modelName = "Model" . $linkedModelsMedia->id() . ""; echo $modelName ?>', true);">
													<?php echo $linkedModelsMedia->displayTitle(); ?> </input>
												</div>
											</div>
										</div>
									<?php endif; ?>
								<?php endforeach; ?>
							<?php endif; ?>
							<?php if ($linkedLinkedModels = $linkedModel->valueResource()->value('dcterms:hasPart', ['all' => true])): ?>
								<?php foreach($linkedLinkedModels as $linkedLinkedModel): ?>
									<?php if ($linkedLinkedModelsMedias = $linkedLinkedModel->valueResource()->media()): ?>
										<?php foreach($linkedLinkedModelsMedias as $linkedLinkedModelsMedia): ?>
											<?php if (in_array($linkedLinkedModelsMedia->extension(), ["nxz", "ply", "nxs"])): ?>
												<div class="<?php echo "layer" . $linkedLinkedModelsMedia->id() . ""; ?>">
													<div class="findLegend">
														<div class="bubble model">
															<input class="layerOK" type="checkbox" checked="checked" style="cursor:hand;" onclick="presenter.toggleInstanceVisibilityByName('<?php $modelName = "Model" . $linkedLinkedModelsMedia->id() . ""; echo $modelName ?>', true);">
															<?php echo $linkedLinkedModelsMedia->displayTitle(); ?> </input>
														</div>
													</div>
												</div>
											<?php endif; ?>
										<?php endforeach; ?>
									<?php endif; ?>
								<?php endforeach; ?>
							<?php endif; ?>
						<?php endforeach; ?>
					<?php endif; ?>
				</fieldset>
			</div>
			<canvas id="draw-canvas" style="background-image: url(<?php echo $this->assetUrl('skins/backgrounds/dark.jpg'); ?>)"/>
		</div>
	<?php endif; ?>
	<?php
	$mediaTabs = [
		'gisExt' => ['id' => 'gisData', 'template' => 'omeka/site/item/show-media-gis.phtml'],
		'imgExt' => ['id' => 'mediaTab', 'template' => 'omeka/site/item/show-media-images.phtml'],
		'ytExt' => ['id' => 'youtubeTab', 'template' => 'omeka/site/item/show-media-youtube.phtml'],
		'pdfExt' => ['id' => 'pdfTab', 'template' => 'omeka/site/item/show-media-pdf.phtml'],
		'videoExt' => ['id' => 'videoTab', 'template' => 'omeka/site/item/show-media-video.phtml'],
		'audioExt' => ['id' => 'audioTab', 'template' => 'omeka/site/item/show-media-audio.phtml']
	];
	foreach ($mediaTabs as $extType => $tab) {
		if (array_intersect($mediaExtent, $$extType)) {
			echo '<div class="tab" id="' . $tab['id'] . '">';
			echo $this->partial($tab['template'], $this->vars());
			echo '</div>';
		}
	}
	?>
	</div>

<script type="text/javascript">

function toggleToolbar() {
    document.getElementById("toggled-toolbar").classList.toggle("hidden");
	$("#toggleToolbar").toggleClass("active-tool");

}

function openTabs(evt, tabName) {
  var i, x, tablinks;
  x = document.getElementsByClassName("tab");
  for (i = 0; i < x.length; i++) {
    x[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tablink");
  for (i = 0; i < x.length; i++) {
    tablinks[i].className = tablinks[i].className.replace(" w3-dark-red", "");
  }
  document.getElementById(tabName).style.display = "block";
  evt.currentTarget.className += " w3-dark-red";
<?php if (in_array("geojson", $mediaExtent)): ?>
  map.invalidateSize();
<?php endif; ?>
}

</script>

<script type="text/javascript">

<?php if (array_intersect($mediaExtent, $tdExt)): ?>

var presenter = null;
function setup3dhop() { 
	presenter = new Presenter("draw-canvas");
	var sceneModify = null;
	presenter.setScene({
});
	presenter._onEndMeasurement = onEndMeasure;
    presenter._onEndPickingPoint = onEndPick;
}

let isMeasurementActive = false;
let isPickpointActive = false;
isSectionActive = false;
let currentColorMode = 2; // 1 = plein, 2 = transparent, 3 = couleur unie

function actionsToolbar(action) {
    switch(action) {
        case 'home':
            presenter.resetTrackball();
            break;
        case 'zoomin':
            presenter.zoomIn();
            break;
        case 'zoomout':
            presenter.zoomOut();
            break;
		case 'light':
			const isLightOn = !presenter.isLightTrackballEnabled();
			presenter.enableLightTrackball(isLightOn);
			const $lightIcon = $('button[data-action="light"] i');
			if (isLightOn) {
				$lightIcon.removeClass('fa-regular').addClass('fas'); // lumière activée = ampoule pleine
				$lightIcon.css("color","yellow");
			} else {
				$lightIcon.removeClass('fas').addClass('fa-regular'); // lumière désactivée = ampoule vide
				$lightIcon.css("color","white");
			}
			break;
		case 'lighting':
			const isLightingOn = !presenter.isSceneLightingEnabled();
			presenter.enableSceneLighting(isLightingOn);
			const $lightingIcon = $('button[data-action="lighting"] i');
			if (isLightingOn) {
				$lightingIcon.removeClass('fa-regular').addClass('fa-solid');
			} else {
				$lightingIcon.removeClass('fa-solid').addClass('fa-regular');
			}
			break;
        case 'color1':
            colorSwitch(1); break;
        case 'color2':
            colorSwitch(2); break;
        case 'color3':
            colorSwitch(3); break;
		case 'perspective':
			presenter.toggleCameraType();
			cameraSwitch(); // ta fonction existante
			toggleCameraIcon(); // ✅ nouvelle fonction à appeler
			break;
        case 'measure':
            isMeasurementActive = !isMeasurementActive;
            presenter.enableMeasurementTool(isMeasurementActive);
            document.getElementById('measure-box').style.display = isMeasurementActive ? "block" : "none";
            toggleButtonActive('measure');
            break;
        case 'pick':
            isPickpointActive = !isPickpointActive;
            presenter.enablePickpointMode(isPickpointActive);
            document.getElementById('pickpoint-box').style.display = isPickpointActive ? "block" : "none";
            toggleButtonActive('pick');
            break;
        case 'sections':
            isSectionActive = !isSectionActive;
            sectiontoolReset();
            sectiontoolSwitch();
            document.getElementById('sections-box').style.display = isSectionActive ? "block" : "none";
            toggleButtonActive('sections');
            break;
        case 'screenshot':
            presenter.saveScreenshot();
            break;
		case 'full':
			fullscreenSwitch();
			break;
    }
}

function onEndMeasure(measure) {
	// measure.toFixed(2) sets the number of decimals when displaying the measure
	// depending on the model measure units, use "mm","m","km" or whatever you have
	$('#measure-output').html(measure.toFixed(2));
}

function onEndPick(point) {
	// point.toFixed(2) sets the number of decimals when displaying the picked point
	var x = point[0].toFixed(2);
	var y = point[2].toFixed(2);
	var z = point[1].toFixed(2);
	$('#pickpoint-output').html("[ "+x+" , "+y+" , "+z+" ]");
}

function colorSwitch(mode){
    
    if(mode == 1)
    {
        $('#color_on').css("display", "none");
        $('#color_off').css("display", "block");
        $('#color_tr').css("display", "none");
        presenter.setInstanceTransparencyByName(HOP_ALL,false,true);   
        presenter.setInstanceSolidColorByName(HOP_ALL,false,true);       
    }
    else if(mode == 2)
    {
        $('#color_on').css("display", "none");
        $('#color_off').css("display", "none");
        $('#color_tr').css("display", "block");
        presenter.setInstanceTransparencyByName(HOP_ALL,true,true);   
        presenter.setInstanceSolidColorByName(HOP_ALL,false,true);   
    }
    else if(mode == 3)
    {
        $('#color_on').css("display", "block");
        $('#color_off').css("display", "none");
        $('#color_tr').css("display", "none");
        presenter.setInstanceTransparencyByName(HOP_ALL,false,true);   
        presenter.setInstanceSolidColorByName(HOP_ALL,true,true);   
    }
}

function toggleButtonActive(action) {
    const btn = document.querySelector(`[data-action="${action}"]`);
    if (btn) {
        btn.classList.toggle("active-tool");
    }
}

function toggleLightIcon() {
    const $icon = $('button#toggleLight[data-action="light"] i');
    if ($icon.hasClass('fas')) {
        $icon.removeClass('fas').addClass('fa-regular');
    } else {
        $icon.removeClass('fa-regular').addClass('fas');
    }
}

function fullscreenSwitch() {
    const container = document.getElementById("3dhop");

    if (!document.fullscreenElement) {
        if (container.requestFullscreen) {
            container.requestFullscreen();
        } else if (container.webkitRequestFullscreen) {
            container.webkitRequestFullscreen();
        } else if (container.mozRequestFullScreen) {
            container.mozRequestFullScreen();
        } else if (container.msRequestFullscreen) {
            container.msRequestFullscreen();
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
    }
}

function toggleCameraIcon() {
  const persp = document.getElementById('camera-icon-persp');
  const ortho = document.getElementById('camera-icon-ortho');

  const isPerspective = presenter.getCameraType() === "perspective";

  persp.style.display = isPerspective ? "inline-block" : "none";
  ortho.style.display = isPerspective ? "none" : "inline-block";
}



document.addEventListener("fullscreenchange", () => {
    const $icon = $('button[data-action="full"] i');
    if (document.fullscreenElement) {
        $icon.removeClass('fa-expand').addClass('fa-compress');
    } else {
        $icon.removeClass('fa-compress').addClass('fa-expand');
    }
});


<?php endif; ?>

var firstTab = "'" + $("#3dhopParent > div").first().attr("id"); + "'";

$(document).ready(function(){
	$('#3dhopParent').each(function () {
    if (!$(this).children('div').length) {
        $(this).html("<div class='noMedia'><h1>NO MEDIA AVAILABLE</h1></div>");
    }
	$("#3dhopParent > div:first").show();
	$("#3dhopParent > div:not(:first)").hide();
	$("div.w3-bar > button:first").addClass("w3-dark-red");
  })
<?php if (array_intersect($mediaExtent, $tdExt)): ?>
	init3dhop();
	setup3dhop();
	moveToolbar(20,20);
    sectiontoolInit();
	modifyScene0();
<?php endif; ?>
	if (!presenter.isSceneLightingEnabled()) {
        $('button[data-action="lighting"] i').removeClass('fas').addClass('fa-regular');
    }
    if (!presenter.isLightTrackballEnabled()) {
        $('button[data-action="light"] i').removeClass('fas').addClass('fa-regular');
    }
});
</script>

<script>
let isSectionActive = false;

function toggleSections() {
	isSectionActive = !isSectionActive;
	sectiontoolReset(); // reset all planes
	sectiontoolSwitch(); // toggle clipping tool
	document.getElementById('sections-box').style.display = isSectionActive ? 'block' : 'none';
	toggleButtonActive('sections');

	if (isSectionActive) {
		['x', 'y', 'z'].forEach(updateSection);

		// 🔓 Afficher les icônes
		['xplane', 'yplane', 'zplane'].forEach(id => {
			const el = document.getElementById(id);
			if (el) el.style.visibility = 'visible';
		});
	} else {
		// 🔒 Optionnel : les cacher à la désactivation
		['xplane', 'yplane', 'zplane'].forEach(id => {
			const el = document.getElementById(id);
			if (el) el.style.visibility = 'hidden';
		});
	}
}

function updateSection(axis) {
  if (!isSectionActive) return;

  const axisMap = { x: 0, y: 1, z: 2 };
  const i = axisMap[axis];

  const slider = document.getElementById(`${axis}planeSlider`);
  const flip = document.getElementById(`${axis}planeFlip`);

  if (!slider || !flip) return;

  const val = parseFloat(slider.value);
  const direction = [0, 0, 0];
  const origin = [0, 0, 0];

  direction[i] = flip.checked ? -1 : 1;
  origin[i] = val;

  presenter.setClippingPlane(i, direction, origin);
}

function toggleAxisSection(axis) {
  const axisMap = { x: 0, y: 1, z: 2 };
  const i = axisMap[axis];

  const enabled = !presenter.isSectionToolEnabled(i);
  presenter.enableSectionTool(i, enabled);

  document.getElementById(`${axis}plane`).style.display = enabled ? 'none' : 'inline';
  document.getElementById(`${axis}plane_on`).style.display = enabled ? 'inline' : 'none';

  updateSection(axis);
}
</script>

<?php if (array_intersect($mediaExtent, $tdExt)): ?>
<script>
$(window).resize(function() {
	presenter.repaint();
});
function modifyScene0() {
	$(":checkbox" ).prop("checked",true);
	$("fieldset > div").show();
	disableInfo();
	$(".infoContext").html("");
	$(".infoContext").hide();
	$(".layerHopList").hide();
	$('#infoParagraph').html("<b>Main Model</b>");
	presenter.setScene({
		meshes: {
			<?php if (count($otherMedia) > 0): ?>
            	<?php foreach($otherMedia as $media): ?>
					<?php if (in_array($media->extension(), ["nxz", "ply", "nxs"])): ?>
					"<?php echo $media->displayTitle(); ?>" : { url: "<?php echo $media->originalUrl(); ?>" },
            		<?php endif; ?>
				<?php endforeach; ?>
            <?php endif; ?>
			<?php if ($linkedModels = $item->value('dcterms:hasPart', ['all' => true])): ?>
				<?php foreach($linkedModels as $linkedModel): ?>
					<?php if ($linkedModelsMedias = $linkedModel->valueResource()->media()): ?>
						<?php foreach($linkedModelsMedias as $linkedModelsMedia): ?>
							<?php if (in_array($linkedModelsMedia->extension(), ["nxz", "ply", "nxs"])): ?>
								"<?php echo $linkedModelsMedia->displayTitle(); ?>" : { url: "<?php echo $linkedModelsMedia->originalUrl(); ?>" },
							<?php endif; ?>
						<?php endforeach; ?>
					<?php endif; ?>
					<?php if ($linkedLinkedModels = $linkedModel->valueResource()->value('dcterms:hasPart', ['all' => true])): ?>
						<?php foreach($linkedLinkedModels as $linkedLinkedModel): ?>
							<?php if ($linkedLinkedModelsMedias = $linkedLinkedModel->valueResource()->media()): ?>
								<?php foreach($linkedLinkedModelsMedias as $linkedLinkedModelsMedia): ?>
									<?php if (in_array($linkedLinkedModelsMedia->extension(), ["nxz", "ply", "nxs"])): ?>
									"<?php echo $linkedLinkedModelsMedia->displayTitle(); ?>" : { url: "<?php echo $linkedLinkedModelsMedia->originalUrl(); ?>" },
									<?php endif; ?>
								<?php endforeach; ?>
							<?php endif; ?>
						<?php endforeach; ?>
					<?php endif; ?>
				<?php endforeach; ?>
			<?php endif; ?>
		},
		modelInstances : {
			<?php if (count($otherMedia) > 0): ?>
            <?php foreach($otherMedia as $media): ?>
				<?php if (in_array($media->extension(), ["nxz", "ply", "nxs"])): ?>
			"<?php echo "Model" . $media->id() . ""; ?>" : { mesh : "<?php echo $media->displayTitle(); ?>",
				useTransparency : false,
					alpha : 1
					},
			<?php endif; ?>
			<?php endforeach; ?>
            <?php endif; ?>
			<?php if ($linkedModels = $item->value('dcterms:hasPart', ['all' => true])): ?>
				<?php foreach ($linkedModels as $linkedModel): ?>
					<?php if ($linkedModelsModels = $linkedModel->valueResource()->media()): ?>
						<?php foreach ($linkedModelsModels as $linkedModelsModel): ?>
							<?php if ($linkedModelsModel->extension() == "nxz" || $linkedModelsModel->extension() == "ply" || $linkedModelsModel->extension() == "nxs"): ?>
								"<?php echo "Model" . $linkedModelsModel->id() . ""; ?>" : { mesh : "<?php echo $linkedModelsModel->displayTitle(); ?>",
								useTransparency : false,
								alpha : 1
								},
							<?php endif; ?>
						<?php endforeach; ?> 
					<?php endif; ?>
					<?php if ($linkedLinkedModels = $linkedModel->valueResource()->value('dcterms:hasPart', ['all' => true])): ?>
						<?php foreach($linkedLinkedModels as $linkedLinkedModel): ?>
							<?php if ($linkedLinkedModelsMedias = $linkedLinkedModel->valueResource()->media()): ?>
								<?php foreach($linkedLinkedModelsMedias as $linkedLinkedModelsMedia): ?>
									<?php if (in_array($linkedLinkedModelsMedia->extension(), ["nxz", "ply", "nxs"])): ?>
									"<?php echo "Model" . $linkedLinkedModelsMedia->id() . ""; ?>" : { mesh : "<?php echo $linkedLinkedModelsMedia->displayTitle(); ?>",
									useTransparency : false,
									alpha : 1
									},
									<?php endif; ?>
								<?php endforeach; ?>
							<?php endif; ?>
						<?php endforeach; ?>
					<?php endif; ?>
				<?php endforeach; ?>
			<?php endif; ?>
		},
		trackball: {
			type: <?php echo "TurntablePanTrackball"; ?>,
			trackOptions: {
				startPhi      : <?php echo "1"; ?>,
				startTheta    : <?php echo "90.0"; ?>,
				startDistance : <?php echo "1.0"; ?>,
				minMaxPhi     : <?php echo "[-180, 180]"; ?>,
				minMaxTheta   : <?php echo "[-180, 180.0]"; ?>,
				minMaxDist    : <?php echo "[0.01, 2.0]"; ?>,
				startPanX     : <?php echo "0.0"; ?>,
				startPanY     : <?php echo "0.0"; ?>,
				startAngleX   : <?php echo "0.0"; ?>,
				startAngleY   : <?php echo "0.0"; ?>,
				minMaxPanX    : <?php echo "[-0.7, 0.7]"; ?>,
				minMaxPanY    : <?php echo "[-0.7, 0.7]"; ?>,
				minMaxAngleX  : <?php echo "[-180.0, 180.0]"; ?>,
				minMaxAngleY  : <?php echo "[-180.0, 180.0]"; ?>,
			}
		},
		space: {
			centerMode: "<?php echo "scene"; ?>",
			radiusMode: "<?php echo "scene"; ?>",
			transform: { 
				rotation: <?php echo "[-90.0, 0.0, 0.0]"; ?>,
				scale: <?php echo "[1.0, 1.0, 1.0]"; ?>,
			},
			cameraNearFar: <?php echo "[0.01, 5.0]"; ?>,
		}
	});
    presenter._onEndMeasurement = onEndMeasure;
    presenter._onEndPickingPoint = onEndPick;
}

function checkAllModels() {
	if ($("#checkAll").prop("checked")) {
		presenter.setInstanceVisibility(HOP_ALL, true, true);
		$("input").not("#checkAll").prop('checked',true	);			
	}	else {
		presenter.setInstanceVisibility(HOP_ALL, false, false);
		$("input").not("#checkAll").prop('checked',false);
	}
	presenter.repaint();
}

function changeVisibility(name, single) {

if(single)
{
presenter.setInstanceVisibility(HOP_ALL, false, false);
presenter.setInstanceVisibilityByName(name, true, true);

var i;
for (i = 0; i < $('.layerCB').length; i++) {
if($('.layerCB')[i].id == name)
$('.layerCB')[i].checked = true;
else
$('.layerCB')[i].checked = false; 
} 
}
else
{
presenter.toggleInstanceVisibilityByName(name, true);
}
}

function setTopHeading() {
var currpos = presenter.getTrackballPosition();
currpos[1] = 90.0;
presenter.animateToTrackballPosition(currpos);
}

function setNorthHeading() {
var currpos = presenter.getTrackballPosition();
currpos[0] = 0.0;
presenter.animateToTrackballPosition(currpos);
}

function infoSwitch() {
  if(jQuery('#pin').css("visibility")=="visible"){
    enableInfo();
	presenter._onPickedInstance = onPickedInstance;
	$(".infoContext").show();
  }
  else{
    disableInfo();
	presenter._onPickedInstance = !onPickedInstance;
	$(".infoContext").html("");
	$(".infoContext").hide();
  }
}

function enableInfo() {
  jQuery('#pin').css("visibility", "hidden");
  jQuery('#pin_on').css("visibility", "visible");
}

function disableInfo() {
  jQuery('#pin_on').css("visibility", "hidden");
  jQuery('#pin').css("visibility", "visible");
}

function toggleLegend() {
	jQuery(".layerHopList").toggle();
	$("#toggleLegend").toggleClass("active-tool");
}

function resetTrackball() {
	presenter.setTrackballPosition([ 0, 90, 0, 0, 0, 1 ]);
}

function getView() {
	var trackballPosition = presenter.getTrackballPosition();
	var phiPos = trackballPosition[0];
	var thetaPos = trackballPosition[1];
	var xPos = trackballPosition[2];
	var yPos = trackballPosition[3];
	var zPos = trackballPosition[4];
	var distPos = trackballPosition[5];
	var xAngle = trackballPosition[6];
	var yAngle = trackballPosition[7];
	var zAngle = trackballPosition[8];
	$('#infoPositionContainer').show();
	$('#infoPosition').html("<b>Trackball position</b><br>Phi: "+phiPos+"<br>Theta: "+thetaPos+"<br>X: "+xPos+"<br>Y: "+yPos+"<br>Z: "+zPos+"<br>Dist: "+distPos);
	$('#hiddenPosition').html(phiPos+" "+thetaPos+" "+xPos+" "+yPos+" "+zPos+" "+distPos);
}

function copyToClipboard(element) {
  var $temp = $("<input>");
  $("body").append($temp);
  $temp.val($(element).text()).select();
  document.execCommand("copy");
  $temp.remove();
  alert('Your view position has been copied to the clipboard');
}

</script>
<?php endif; ?>